---
import { Icon } from "astro-icon/components";

interface Props {
  jobTitle: string;
  jobDescription: string;
  jobPeriod: string;
  company: string;
  jobType: string;
  skills: Array<{
    name: string;
    icon: string;
  }>;
}

const { jobTitle, jobDescription, jobPeriod, jobType, company, skills } =
  Astro.props;
---

<li class="card">
  <!-- <span id="bg"></span> -->
  <!-- <span id="backdrop"></span> -->
  <div id="card__content">
    <div id="card__head">
      <h4>{jobTitle}</h4>
      <small class="skill-pill">{jobType}</small>
      <span id="company">{company}</span>
      <span>{jobPeriod}</span>
    </div>
    <p>
      {jobDescription}
    </p>
    <b>Skills</b>
    <ul id="stack__container">
      {
        skills.map((skill) => (
          <li class="skill-pill" title={skill.name}>
            {skill.icon && (
              <Icon name={"skill-icons:" + skill.icon} class="skill-icon" />
            )}
            <span>{skill.name}</span>
          </li>
        ))
      }
    </ul>
  </div>
</li>

<style>
  .card {
    text-align: initial;
    padding: var(--border-size);
    width: 100%;
    max-width: 48rem;
    min-width: 18rem;
    position: relative;
    overflow: hidden;
    z-index: 0;

    border-radius: calc(var(--radius) + var(--border-size));
    background-color: var(--border);
    box-shadow: rgb(51 51 51 / 90%) 0px 0px 1000px 90px inset;

    transition:
      transform 300ms ease-in-out,
      box-shadow 300ms ease-in-out;
  }

  .card:hover {
    transform: scale(1.02);
    box-shadow:
      rgb(51 51 51 / 90%) 0px 0px 1000px 80px inset,
      rgb(51 51 51 / 90%) 0px 0px 18px;

    &::after {
      opacity: 1;
    }
  }

  .card::after {
    content: "";
    height: 100%;
    width: 100%;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    opacity: 0;
    transition: opacity 500ms;

    background: radial-gradient(
      600px circle at var(--mouse-x) var(--mouse-y),
      rgb(250, 250, 250, 0.5),
      transparent 40%
    );
  }

  /* snake like animation, idk if i keep this 
  #bg {
    overflow: hidden;
    position: absolute;
    inset: 0;
  }
  #bg::before {
    content: "";
    width: 200%;
    aspect-ratio: 1/1;
    position: absolute;
    translate: -50% -50%;
    inset: 50% auto auto 50%;
    background-image: conic-gradient(
      from 0deg,
      transparent 0 300deg,
      white 360deg
    );
    animation: rotate 10s ease infinite;
  }
  #backdrop {
    position: absolute;
    inset: var(--border-size);
    border-radius: var(--radius);
  }*/

  #card__head {
    max-width: 75%;
  }

  #card__content {
    z-index: 2;
    position: relative;
    color: white;
    padding: var(--space-md);
    background-color: rgba(10, 10, 10, 0.8);
    border-radius: var(--radius);
  }

  #card__content h4 {
    font-size: 1.25rem;
    line-height: 1.75rem;
    font-weight: bold;
  }

  #card__content span {
    font-size: 0.875rem;
    display: block;
    opacity: 0.9;

    &#company {
      font-weight: 600;
    }
  }

  #card__content small {
    font-size: 0.75rem;
    font-weight: bold;
    position: absolute;
    right: 1rem;
    top: 1rem;
  }

  #card__content p {
    text-align: justify;
    margin-top: var(--space-sm);
    font-size: 0.875rem;
    line-height: 1.5rem;

    /* display: -webkit-box;
				-webkit-box-orient: vertical;
				line-clamp: 3;
				-webkit-line-clamp: 3;
				overflow: hidden; */
  }

  #card__content b {
    display: inline-block;
    margin-top: var(--space-md);
  }

  #stack__container {
    margin-top: var(--space-xs);
    display: flex;
    column-gap: 1rem;
    overflow-x: scroll;
    scrollbar-width: 0;
  }

  .skill-pill {
    display: flex;
    align-items: center;
    column-gap: 0.5rem;

    background-color: var(--foreground);
    color: var(--background);

    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius);

    font-size: 0.875rem;
    font-weight: 600;

    cursor: default;

    &:hover {
      filter: brightness(120%);
    }
  }

  .skill-pill span {
    white-space: nowrap;
  }
</style>

<script>
  const cards = document.getElementsByClassName("card");

  Array.from(cards).forEach((card) => {
    card.addEventListener("mousemove", (e: Event) => {
      const mouseEvent = e as MouseEvent;
      const rect = card.getBoundingClientRect();
      const x = mouseEvent.clientX - rect.left;
      const y = mouseEvent.clientY - rect.top;

      (card as HTMLElement).style.setProperty("--mouse-x", `${x}px`);
      (card as HTMLElement).style.setProperty("--mouse-y", `${y}px`);
    });
  });
</script>
